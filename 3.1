# Числа

# Заповнити код приведених нижче функцій. Функція main() вже
# налаштована для виклику функцій з декількома різними
# параметрами, і виводить 'OK' у випадку, якщо виклик функції
# коректний.
# Початковий код кожної функції містить 'return'
# і є просто заготовкою для вашого коду.


# A. Сума чисел кратних 3 і 5
# Якщо виписати всі натуральні числа менші 10, кратні 3 або 5, 
# то отримаємо 3, 5, 6 і 9. Сума цих чисел - 23.
# Знайдіть суму всіх чисел менших 1000 кратних 3 або 5.
# Спробуйте записати розв’язок в одну стрічку за допомогою генератора списку
# і вбудованої функції sum
def multiples():
    return


# B. Сума парних чисел ряду Фібоначчі
# Кожний наступний елемент ряду Фібоначчі отримується при додаванні 
# двох попередніх. Починаючи з 1 і 2, перші 10 елементів будуть:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# Знайдіть суму всіх елементів ряду Фібоначчі, кожен з яких
# є парним числом і не перевищує чотири мільйони.
# Підказка: поділіть задачу на частини: спочатку отримайте сам ряд Фібоначчі,
# потім отримайте ряд парних елементів.
def fibonacci():
    return


# С. Самий більший паліндром
# Число-паліндром з обох сторін (справа і зліва) читається однаково. 
# Саме більше число-паліндром, яке отримане добутком двох двозначних чисел 
# – 9009 = 91 * 99.
# Знайдіть самий більший паліндром, який отриманий добутком двох трьохзначних чисел.
def palindrome():
    return


# Проста функція test() використовується в main() для виведення
# порівняння того, що повертається з функції з тим, що вона повинна повертати.

def test(got, expected):
    if got == expected:
        prefix = ' OK '
    else:
        prefix = '  X '
    print('%s Отримано: %s | Очікувалося: %s' % (prefix, repr(got), repr(expected)))



# Викликає фунції вище з тестовими параметрами.
def main():
    print('Сума чисел кратних 3 і 5')
    test(multiples(), 233168)

    print()
    print('Сума парних чисел ряду Фібоначчі')
    test(fibonacci(), 4613732)

    print()
    print('Самий більший паліндром')
    test(palindrome(), 906609)

if __name__ == '__main__':
    main()






