# Списки

# Заповнити код приведених нижче функцій. Функція main() вже
# налаштована для виклику функцій з декількома різними
# параметрами, і виводить 'OK' у випадку, якщо виклик функції
# коректний.
# Початковий код кожної функції містить 'return'
# і є просто заготовкою для вашого коду.


# A. Початок і кінець співвпадають
# Функція приймає в якості аргумента список стрічок.
# Необхідно повернутиь кількість стрічок,
# довжина яких складає 2 символи і більше,
# а перший і останній символи цих стрічок співпадають.
# Примітка: в python немає оператора ++. Але += працює.
def match_ends(words):
    # +++ ваш код +++
    return


# B. Починаються з X на початку
# Функція приймає в якості аргументу список стрічок.
# Необхідно повернути відсортований список стрічок, в якому:
# спочатку йде група стрічок, що починаються на 'x', потім всі інші.
# Нариклад: з ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] получиться
# ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
# Підказка: це можна зробити за допомогою склеювання 2х наперед відсортованих списків
def front_x(words):
    # +++ ваш код +++
    return


# C. Сортування за останнім числом
# Дано список непустих списків.
# Потрібно повернути список, відсортований за
# зростанням останнього елемента кожного підсписку.
# Наприклад: із [[1, 7], [1, 3], [3, 4, 5], [2, 2]] получиться
# [[2, 2], [1, 3], [3, 4, 5], [1, 7]]
# Підказка: використовуйте параметр key= функції сортування,
# щоб отримати останній елемент підсписку.

def sort_last(lists):
    # +++ ваш код +++
    return



# D. Видалення сусідів
# Дано список чисел.
# Потрібно повернути список, де всі сусідні елементи
# були б зведені до одного елемента.
# Таким чином, із [1, 2, 2, 3, 4, 4] получиться [1, 2, 3, 4].
def remove_adjacent(nums):
    # +++ ваш код +++
    return


# Проста функція test() використовується в main() для виведення
# порівняння того, що повертається з функції з тим, що вона повинна повертати.
def test(got, expected):
    if got == expected:
        prefix = ' OK '
    else:
        prefix = '  X '
    print('%s Отримано: %s | Очікувалося: %s' % (prefix, repr(got), repr(expected)))


# Викликає фунції вище з тестовими параметрами.
def main():
    print('Початок і кінець співвпадають')
    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)
    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)
    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)

    print()
    print('Починаються з X на початку')
    test(front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa']),
       ['xaa', 'xzz', 'axx', 'bbb', 'ccc'])
    test(front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']),
       ['xaa', 'xcc', 'aaa', 'bbb', 'ccc'])
    test(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']),
       ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'])

    print()
    print('Сортировка по последнему числу')
    test(sort_last([[1, 3], [3, 2], [2, 1]]),
       [[2, 1], [3, 2], [1, 3]])
    test(sort_last([[2, 3], [1, 2], [3, 1]]),
       [[3, 1], [1, 2], [2, 3]])
    test(sort_last([[1, 7], [1, 6], [3, 4, 5], [2, 2]]),
       [[2, 2], [3, 4, 5], [1, 6], [1, 7]])

    print()
    print('Видалення сусідів')
    test(remove_adjacent([1, 2, 2, 3]), [1, 2, 3])
    test(remove_adjacent([2, 2, 3, 3, 3, 3]), [2, 3])
    test(remove_adjacent([4, 5, 5, 4, 4]), [4, 5, 4])
    test(remove_adjacent([]), [])


if __name__ == '__main__':
    main()
